/*
 * This file is generated by jOOQ.
 */
package com.zsx.generator.jooq.tables;


import com.zsx.generator.jooq.Indexes;
import com.zsx.generator.jooq.Keys;
import com.zsx.generator.jooq.Myschema;
import com.zsx.generator.jooq.tables.records.CompanyRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 2052945764;

    /**
     * The reference instance of <code>myschema.company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>myschema.company.id</code>.
     */
    public final TableField<CompanyRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>myschema.company.name</code>.
     */
    public final TableField<CompanyRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>myschema.company.age</code>.
     */
    public final TableField<CompanyRecord, Integer> AGE = createField(DSL.name("age"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>myschema.company.address</code>.
     */
    public final TableField<CompanyRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.CHAR(50), this, "");

    /**
     * The column <code>myschema.company.salary</code>.
     */
    public final TableField<CompanyRecord, Float> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * The column <code>myschema.company.join_date</code>.
     */
    public final TableField<CompanyRecord, Date> JOIN_DATE = createField(DSL.name("join_date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>myschema.company</code> table reference
     */
    public Company() {
        this(DSL.name("company"), null);
    }

    /**
     * Create an aliased <code>myschema.company</code> table reference
     */
    public Company(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>myschema.company</code> table reference
     */
    public Company(Name alias) {
        this(alias, COMPANY);
    }

    private Company(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Company(Table<O> child, ForeignKey<O, CompanyRecord> key) {
        super(child, key, COMPANY);
    }

    @Override
    public Schema getSchema() {
        return Myschema.MYSCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_PKEY);
    }

    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.COMPANY_PKEY;
    }

    @Override
    public List<UniqueKey<CompanyRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyRecord>>asList(Keys.COMPANY_PKEY);
    }

    @Override
    public Company as(String alias) {
        return new Company(DSL.name(alias), this);
    }

    @Override
    public Company as(Name alias) {
        return new Company(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Name name) {
        return new Company(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, String, Float, Date> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
